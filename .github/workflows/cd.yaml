on:
  push:
    tags:
      - 'v*.*'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build, tag, and push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          HUB_REPOSITORY: ${{ secrets.HUB_REPOSITORY }}
          IMAGE_TAG: latest
          NODE_VERSION: 20-alpine3.18
          DUMB_INIT_VERSION: 1.2.5-r2
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PRISMA_LOG_LEVEL: ${{ secrets.PRISMA_LOG_LEVEL }}
          NODE_ENV: production
          PORT: ${{ secrets.PORT }}
        run: |
          docker build -t schedule-api:$IMAGE_TAG \
            --target production \
            --build-arg NODE_VERSION=$NODE_VERSION \
            --build-arg DUMB_INIT_VERSION=$DUMB_INIT_VERSION \
            --build-arg JWT_SECRET=$JWT_SECRET \
            --build-arg JWT_EXPIRATION=$JWT_EXPIRATION \
            --build-arg DATABASE_URL=$DATABASE_URL \
            --build-arg PRISMA_LOG_LEVEL=$PRISMA_LOG_LEVEL \
            --build-arg NODE_ENV=$NODE_ENV \
            --build-arg PORT=$PORT .

          docker tag schedule-api:$IMAGE_TAG $DOCKER_USERNAME/$HUB_REPOSITORY:$IMAGE_TAG
          docker push $DOCKER_USERNAME/$HUB_REPOSITORY:$IMAGE_TAG
