name: Continuous Deployment

on:
  push:
    tags:
      - 'v.*.*'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t scheduleapi-app:$IMAGE_TAG \
            --build-arg NODE_VERSION=20-alpine3.18 \
            --build-arg DUMB_INIT_VERSION=1.2.5-r2 \
            --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --build-arg JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
            --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --build-arg PRISMA_LOG_LEVEL=${{ secrets.PRISMA_LOG_LEVEL }} \
            --build-arg NODE_ENV=production \
            --build-arg PORT=${{ secrets.PORT }} .

          docker tag scheduleapi-app:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Push image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
