name: Continuous Integration for ScheduleApi

on:
  push:
    branches: ['develop', 'feat/ci-integration']

jobs:
  avoid-redundant-builds:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cancel previous redundant runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install

      - name: Lint
        run: yarn lint

  build:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install

      - name: Generate Prisma Client
        run: yarn prisma generate

      - run: yarn build

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      docker:
        image: docker:20.10.7
        options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Make
        run: sudo apt-get update && sudo apt-get install -y make

      - name: Create .env.test file
        run: |
          echo "PORT=${{ secrets.PORT }}" > .env.test
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.test
          echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> .env.test
          echo "CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}" >> .env.test
          echo "DATABASE_URL=${{ secrets.TEST_DATABASE_URL }}" >> .env.test
          echo "POSTGRES_USER_TEST=${{ secrets.POSTGRES_USER_TEST }}" >> .env.test
          echo "POSTGRES_PASSWORD_TEST=${{ secrets.POSTGRES_PASSWORD_TEST }}" >> .env.test
          echo "POSTGRES_DB_TEST=${{ secrets.POSTGRES_DB_TEST }}" >> .env.test
          echo "PRISMA_LOG_LEVEL=${{ secrets.PRISMA_LOG_LEVEL }}" >> .env.test
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env.test
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env.test

      - name: Copy .env.test file to .env.production and .env.development
        run: cp .env.test .env.production && cp .env.test .env.development

      - name: Create .env file with database url
        run: |
          echo "DATABASE_URL=${{ secrets.TEST_DATABASE_URL }}" > .env

      - name: Start Test Environment
        run: make up-test

      - name: Install Dependencies
        run: yarn install

      - name: Generate Prisma Client
        run: yarn prisma generate

      - run: yarn prisma db push

      - name: Run Tests
        run: yarn test

      - name: Stop Test Environment
        run: make down-test
