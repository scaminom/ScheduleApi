// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator fabbrica {
  provider    = "prisma-fabbrica"
  noTranspile = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MECHANIC
  TECHNICIAN_MECHANIC
  SECRETARY
}

enum APPOINTMENT_STATUS {
  PENDING
  COMPLETED
  CANCELED

  @@map("APPOINTMENT_STATUS")
}

model User {
  ci          String        @id @unique
  color       String?
  password    String
  role        Role          @unique
  firstName   String        @map("first_name")
  lastName    String        @map("last_name")
  deletedAt   DateTime?     @map("deleted_at")
  Appointment Appointment[]

  reminders    Reminder[]
  Subscription Subscription[]

  @@map("users")
}

model Appointment {
  id                 Int                @id @default(autoincrement())
  clientName         String
  vehicleDescription String             @map("vehicle_description")
  description        String?
  date               DateTime
  status             APPOINTMENT_STATUS
  userCI             String             @map("user_ci")
  deletedAt          DateTime?          @map("deleted_at")

  user       User         @relation(fields: [userCI], references: [ci])
  Inspection Inspection[]

  @@map("appointments")
}

model Reminder {
  id                            Int       @id @default(autoincrement())
  title                         String
  description                   String
  color                         String
  createdAt                     DateTime? @map("created_at")
  deletedAt                     DateTime? @map("deleted_at")
  reminderDate                  DateTime  @map("reminder_date")
  notificationMinutesBefore     Int       @map("notification_minutes_before")
  notificationSent              Boolean?  @default(false) @map("notification_sent")
  minutesBeforeNotificationSent Boolean?  @default(false) @map("minutes_before_notification_sent")
  userCI                        String    @map("user_ci")
  user                          User?     @relation(fields: [userCI], references: [ci])

  @@map("reminders")
}

model Inspection {
  id            Int                @id @default(autoincrement())
  appointmentId Int
  startDate     DateTime           @map("start_date")
  endDate       DateTime?          @map("end_date")
  status        APPOINTMENT_STATUS

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  jobs        Job[]

  @@map("inspections")
}

model Job {
  id           Int                @id @default(autoincrement())
  inspectionId Int
  name         String
  status       APPOINTMENT_STATUS

  inspection Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  @@map("jobs")
}

model Subscription {
  id        Int      @id @default(autoincrement())
  endpoint  String
  keys      Json
  userRole  Role     @map("user_role")
  createdAt DateTime @default(now())

  user User @relation(fields: [userRole], references: [role])

  @@map("subscriptions")
}
